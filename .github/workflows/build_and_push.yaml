name: Build and puch images

on:   
  push:

env:
  BACKEND_IMAGE_NAME: shortener_backend
  NGINX_IMAGE_NAME: shortener_nginx
  CERTBOT_IMAGE_NAME: dns-route53-certbot

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v2

      - name: Build backend image
        run: docker build . --file ./deploy/Dockerfile --tag $BACKEND_IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"

      - name: Build nginx image
        run: docker build . --file ./nginx/Dockerfile --tag $NGINX_IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"

      - name: Build certbot image
        run: docker build ./certbot --tag $CERTBOT_IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"

      - name: Log in to registry
        run: echo "${{ secrets.WORKFLOW_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push backend image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$BACKEND_IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          docker tag $BACKEND_IMAGE_NAME $IMAGE_ID:latest
          docker push $IMAGE_ID:latest

      - name: Push nginx image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$NGINX_IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          docker tag $NGINX_IMAGE_NAME $IMAGE_ID:latest
          docker push $IMAGE_ID:latest

      - name: Push certbot image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$CERTBOT_IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          docker tag $CERTBOT_IMAGE_NAME $IMAGE_ID:latest
          docker push $IMAGE_ID:latest

  security_scanning:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v2

      - name: Install trivy
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Log in to registry
        run: echo "${{ secrets.WORKFLOW_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Run backend image security scanning
        run: |
          BACKEND_IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/$BACKEND_IMAGE_NAME
          BACKEND_IMAGE_NAME=$(echo $BACKEND_IMAGE_NAME | tr '[A-Z]' '[a-z]')
          trivy image $BACKEND_IMAGE_NAME
          # number of critical vulnerabilities in container OS +  installed python-pkg
          number_of_critical_vulnerabilities=$(trivy image  --format json ${BACKEND_IMAGE_NAME} | grep CRITICAL | wc -l)
          echo "Founded $number_of_critical_vulnerabilities critical security vulnerabilities."
          #if [ $(($number_of_critical_vulnerabilities)) -gt 0 ]; then exit 1; fi
          # outdated python packeges

      - name: Run Nginx image security scanning
        run: |
          NGINX_IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/$NGINX_IMAGE_NAME
          NGINX_IMAGE_NAME=$(echo $NGINX_IMAGE_NAME | tr '[A-Z]' '[a-z]')
          trivy image $NGINX_IMAGE_NAME
          # number of critical vulnerabilities in container OS +  installed python-pkg
          number_of_critical_vulnerabilities=$(trivy image  --format json ${NGINX_IMAGE_NAME} | grep CRITICAL | wc -l)
          echo "Founded $number_of_critical_vulnerabilities critical security vulnerabilities."
          if [ $(($number_of_critical_vulnerabilities)) -gt 0 ]; then exit 1; fi

      - name: Run Certbot image security scanning
        run: |
          CERTBOT_IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/$CERTBOT_IMAGE_NAME
          CERTBOT_IMAGE_NAME=$(echo $CERTBOT_IMAGE_NAME | tr '[A-Z]' '[a-z]')
          trivy image $CERTBOT_IMAGE_NAME
          # number of critical vulnerabilities in container OS +  installed python-pkg
          number_of_critical_vulnerabilities=$(trivy image  --format json ${CERTBOT_IMAGE_NAME} | grep CRITICAL | wc -l)
          echo "Founded $number_of_critical_vulnerabilities critical security vulnerabilities."
          if [ $(($number_of_critical_vulnerabilities)) -gt 0 ]; then exit 1; fi